
package client_gui;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.crypto.Cipher;
import javax.swing.JOptionPane;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;


/**
 *
 * @author rahulthawal
 */
public class Operations extends javax.swing.JFrame {

    
    public Operations() {
        initComponents();
    }
    
    /**
     * This is the code which has the list of operations for a banking applications.
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Account_Text = new javax.swing.JTextField();
        Transaction_Comobox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Amount_Text = new javax.swing.JTextField();
        EnterButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Messages = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Operations on Bank.");

        jLabel2.setText("Account No");

        Transaction_Comobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "REQUEST_BALANCE", "REQUEST_DEPOSIT", "REQUEST_WITHDRAW" }));
        Transaction_Comobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Transaction_ComoboxActionPerformed(evt);
            }
        });

        jLabel3.setText("Transactions");

        jLabel4.setText("Amount");

        EnterButton.setText("ENTER");
        EnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterButtonActionPerformed(evt);
            }
        });

        Messages.setColumns(20);
        Messages.setRows(5);
        jScrollPane1.setViewportView(Messages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Account_Text, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                        .addComponent(Amount_Text, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(Transaction_Comobox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(EnterButton)))))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Account_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Transaction_Comobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Amount_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(EnterButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Transaction_ComoboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Transaction_ComoboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Transaction_ComoboxActionPerformed

    private void EnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterButtonActionPerformed
        // TODO add your handling code here:
        try{
		String account = this.Account_Text.getText(); // To get the text values accounttext textfield
		String Operations;
                Operations = this.Transaction_Comobox.getSelectedItem().toString(); // To get the  values from  transactioncombobox
		
                String amount = this.Amount_Text.getText();// To get the text values amount textfield
                
                // To handle cases when there is no ACCOUNTNUMBER because withput account number transactions cannot be performed.
		if(account == null || account.trim().length() <= 0){
			JOptionPane.showMessageDialog(this,"ACCOUNT NUMBER MUST BE ENTERED");
			Account_Text.requestFocus();
                    
                        System.out.println("ACCOUNT NUMBER MUST BE ENTERED");
 			return;
		}
                // whenever user wants to deposit or withdraw  amount must be entered
		if(!Operations.equals("REQUEST_BALANCE"))
                {
			if(amount == null || amount.trim().length() <= 0)
                        {
				JOptionPane.showMessageDialog(this,"AMOUNT MUST BE ENTER");
				Amount_Text.requestFocus();
                                System.out.println("AMOUNT MUST BE ENTER");
				return;
			}
		}
                
                
		//  code to handle whenever client request balance 
		if(Operations.equals("REQUEST_BALANCE"))
                {
                        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
                        keyGen.initialize(2048);
                        KeyPair generatedKeyPair = keyGen.genKeyPair();
                        PublicKey public_client = generatedKeyPair.getPublic();
                        PrivateKey private_client = generatedKeyPair.getPrivate();
                        SaveKeyPair("/home/sriteja", generatedKeyPair);
                                                                        
			
                        KeyPair loadedKeyPair = LoadKeyPair("/home/sriteja","RSA");
                        PublicKey public_server = loadedKeyPair.getPublic(); //get the public key.
                        
			byte sign[] = CA.Certifying(account.getBytes(),private_client); // using signature class with private_c, provides integrity and authentication 
                        System.out.println(sign.length);
                        Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
                        cipher.init(Cipher.ENCRYPT_MODE, public_server);
                        byte[] cipherData = cipher.doFinal(sign);
			Socket socket = new Socket("localhost",1111); // connecting with server with portnumber 
                         
			ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
			Object req[] = {"balance",account,cipherData};
                        
                        
			out.writeObject(req); // write these values on stream.
			out.flush(); //flush the stream.
                        
			ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
			Object res[] = (Object[])in.readObject(); //Reading stream 
                        
			String response = (String)res[0]; //Message from server side 
                        
			if(response.equals("response"))
                        {
                                byte enc[] = (byte[])res[1]; 
                                this.Messages.setText("RECIEVED ENCRPYTED MESSAGES FROM SERVER : "+new String(enc)+"\n"); // encrypted format                                                             
				byte dec[] = KeyGen.decrypt(enc); // AES algorithm to decrypt messages.                                
				String value[] = new String(dec).split(",");                                
				if(value[0].equals("success")) // if the encry-decry is proper then only it will display the values i.e balance otherwise error.
                                    JOptionPane.showMessageDialog(this,"Your Balance is : "+value[1]);
                                else
				    JOptionPane.showMessageDialog(this,value[0]);                                    
			}
                        else
                        {
				JOptionPane.showMessageDialog(this,"No response from server");
                                System.out.println("No response from server");
                                this.Messages.setText("NO RESPONSE FROM SERVER");
			}
		}
		if(Operations.equals("REQUEST_DEPOSIT"))
                {
                        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
                        keyGen.initialize(2048);
                        KeyPair generatedKeyPair = keyGen.genKeyPair();
                        PublicKey public_client = generatedKeyPair.getPublic();
                        PrivateKey private_client = generatedKeyPair.getPrivate();
                        SaveKeyPair("/home/sriteja", generatedKeyPair);
                                                                        
			
                        KeyPair loadedKeyPair = LoadKeyPair("/home/sriteja","RSA");
                        PublicKey public_server = loadedKeyPair.getPublic(); //get the public key.
                        
			byte sign[] = CA.Certifying(account.getBytes(),private_client); // using signature class with private_c, provides integrity and authentication 
                        System.out.println(sign.length);
                        Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
                        cipher.init(Cipher.ENCRYPT_MODE, public_server);
                        byte[] cipherData = cipher.doFinal(sign);
                        Socket socket = new Socket("localhost",1111); // connecting with server with portnumber
                        
			ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
			Object req[] = {"deposit",account,cipherData,amount.trim()};
			out.writeObject(req); // write these values on stream.
                        
			out.flush(); // flush the stream.
                        
			ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
			Object res[] = (Object[])in.readObject();//Reading stream
			String response = (String)res[0];//Message from server side
                        
			if(response.equals("response"))
                        {
				byte enc[] = (byte[])res[1];                               		
                                this.Messages.setText("RECIEVED ENCRPYTED MESSAGES FROM SERVER : "+new String(enc)+"\n"); // Encrypted format
				byte dec[] = KeyGen.decrypt(enc); // using AES for decrypting                                
				String value[] = new String(dec).split(",");
                                if(value[0].equals("success"))
                                    JOptionPane.showMessageDialog(this,"AFTER DEPOSIT BALANCE is : "+value[1]);                                
				else
                                    JOptionPane.showMessageDialog(this,value[0]);
			}
                        else
                        {
				JOptionPane.showMessageDialog(this,"NO RESPONSE FROM SERVER");
			}
		}
                
		if(Operations.equals("REQUEST_WITHDRAW")){
                        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
                        keyGen.initialize(2048);
                        KeyPair generatedKeyPair = keyGen.genKeyPair();
                        PublicKey public_client = generatedKeyPair.getPublic();
                        PrivateKey private_client = generatedKeyPair.getPrivate();
                        SaveKeyPair("/home/sriteja", generatedKeyPair);
                                                                        
			
                        KeyPair loadedKeyPair = LoadKeyPair("/home/sriteja","RSA");
                        PublicKey public_server = loadedKeyPair.getPublic(); //get the public key.
                        
			byte sign[] = CA.Certifying(account.getBytes(),private_client); // using signature class with private_c, provides integrity and authentication 
                        System.out.println(sign.length);
                        Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
                        cipher.init(Cipher.ENCRYPT_MODE, public_server);
                        byte[] cipherData = cipher.doFinal(sign);
                        Socket socket = new Socket("localhost",1111);
                        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
			Object req[] = {"withdraw",account,cipherData,amount.trim()};
			out.writeObject(req); // write these values on stream.
                        
			out.flush(); // flush the stream.
                        
			ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
			Object res[] = (Object[])in.readObject();//Reading stream
			String response = (String)res[0];
                        
			if(response.equals("response"))
                        {
				byte enc[] = (byte[])res[1];                               		
                                this.Messages.setText("RECIEVED ENCRPYTED MESSAGES FROM SERVER : "+new String(enc)+"\n"); // Encrypted format
				byte dec[] = KeyGen.decrypt(enc); // using AES for decrypting                                
				String value[] = new String(dec).split(",");
                                if(value[0].equals("success"))
                                    JOptionPane.showMessageDialog(this,"AFTER Withdraw BALANCE is : "+value[1]);                                
				else
                                    JOptionPane.showMessageDialog(this,value[0]);
			}
                        else
                        {
				
                                System.out.println("No RESPONSE FROM SERVER");
			}
		}
	}catch(Exception e){
		e.printStackTrace();
	}
    }//GEN-LAST:event_EnterButtonActionPerformed

private void SaveKeyPair(String path, KeyPair keyPair) throws IOException {
		PrivateKey privateKey = keyPair.getPrivate();
		PublicKey publicKey = keyPair.getPublic();
 
		// Store Public Key.
		X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
				publicKey.getEncoded());
		FileOutputStream fos = new FileOutputStream(path + "/public_c.key");
		fos.write(x509EncodedKeySpec.getEncoded());
		fos.close();
 
		// Store Private Key.
		PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
				privateKey.getEncoded());
		fos = new FileOutputStream(path + "/private_c.key");
		fos.write(pkcs8EncodedKeySpec.getEncoded());
		fos.close();
	}
    
    
private static KeyPair LoadKeyPair(String path, String algorithm)
			throws IOException, NoSuchAlgorithmException,
			InvalidKeySpecException {
		// Read Public Key.
		File filePublicKey = new File(path + "/public_s.key");
		FileInputStream fis = new FileInputStream(path + "/public_s.key");
		byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
		fis.read(encodedPublicKey);
		fis.close();
 
		// Read Private Key.
		File filePrivateKey = new File(path + "/private_s.key");
		fis = new FileInputStream(path + "/private_s.key");
		byte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];
		fis.read(encodedPrivateKey);
		fis.close();
 
		// Generate KeyPair.
		KeyFactory keyFactory = KeyFactory.getInstance(algorithm);
		X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
				encodedPublicKey);
		PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
 
		PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(
				encodedPrivateKey);
		PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);
 
		return new KeyPair(publicKey, privateKey);
}
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Operations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Account_Text;
    private javax.swing.JTextField Amount_Text;
    private javax.swing.JButton EnterButton;
    private javax.swing.JTextArea Messages;
    private javax.swing.JComboBox Transaction_Comobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


}
